import requests
import os
import logging
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Exchange name mapping for user-facing notifications
_EXCHANGE_LABELS = {
    'binance': 'Binance',
    'okx': 'OKX',
}


def format_exchange_label(name: str | None) -> str:
    """Return a human-friendly exchange name for notification text."""
    if not name:
        return 'Unknown'
    key = str(name).strip()
    if not key:
        return 'Unknown'
    return _EXCHANGE_LABELS.get(key.lower(), key.upper())

def send_line_message(message: str) -> bool:
    """
    р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Ьр╣Ир╕▓р╕Щ Line Bot API
    
    Args:
        message (str): р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕кр╣Ир╕З
        
    Returns:
        bool: True р╕Цр╣Йр╕▓р╕кр╣Ир╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И, False р╕Цр╣Йр╕▓р╕кр╣Ир╕Зр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И
    """
    try:
        url = "https://api.line.me/v2/bot/message/push"
        token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
        user_id = os.getenv("LINE_USER_ID")
        
        if not token:
            logging.warning("LINE_CHANNEL_ACCESS_TOKEN not found - Line notifications disabled")
            # Fallback to console
            print(f"ЁЯУ▒ Line Message (No Token): {message}")
            return True  # Return True р╣Ар╕Юр╕╖р╣Ир╕нр╣Др╕бр╣Ир╣Гр╕лр╣Йр╕гр╕░р╕Ър╕Ър╕лр╕вр╕╕р╕Ф
        
        if not user_id:
            logging.warning("LINE_USER_ID not found - Line notifications disabled")
            # Fallback to console
            print(f"ЁЯУ▒ Line Message (No User ID): {message}")
            return True  # Return True р╣Ар╕Юр╕╖р╣Ир╕нр╣Др╕бр╣Ир╣Гр╕лр╣Йр╕гр╕░р╕Ър╕Ър╕лр╕вр╕╕р╕Ф
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {token}'
        }
        
        payload = {
            "to": user_id,
            "messages": [{"type": "text", "text": message}]
        }
        
        response = requests.post(url, headers=headers, json=payload, timeout=15)
        
        if response.status_code == 200:
            logging.info("Line message sent successfully")
            return True
        elif response.status_code == 401:
            logging.error("Line Bot API: Invalid access token")
            print(f"ЁЯУ▒ Line Message (Auth Error): {message}")
            return True  # Return True р╣Ар╕Юр╕╖р╣Ир╕нр╣Др╕бр╣Ир╣Гр╕лр╣Йр╕гр╕░р╕Ър╕Ър╕лр╕вр╕╕р╕Ф
        elif response.status_code == 403:
            logging.error("Line Bot API: Forbidden - check bot permissions")
            print(f"ЁЯУ▒ Line Message (Permission Error): {message}")
            return True
        elif response.status_code == 400:
            logging.error(f"Line Bot API: Bad Request - {response.text}")
            print(f"ЁЯУ▒ Line Message (Bad Request): {message}")
            return True
        else:
            logging.error(f"Failed to send Line message: {response.status_code} - {response.text}")
            print(f"ЁЯУ▒ Line Message (Error {response.status_code}): {message}")
            return True  # Return True р╣Ар╕Юр╕╖р╣Ир╕нр╣Др╕бр╣Ир╣Гр╕лр╣Йр╕гр╕░р╕Ър╕Ър╕лр╕вр╕╕р╕Ф
            
    except requests.RequestException as e:
        logging.error(f"Network error sending Line message: {e}")
        # Fallback to console output
        print(f"ЁЯУ▒ Line Message (Network Error): {message}")
        return True  # Return True р╣Ар╕Юр╕╖р╣Ир╕нр╣Др╕бр╣Ир╣Гр╕лр╣Йр╕гр╕░р╕Ър╕Ър╕лр╕вр╕╕р╕Ф
    except Exception as e:
        logging.error(f"Unexpected error sending Line message: {e}")
        print(f"ЁЯУ▒ Line Message (Unexpected Error): {message}")
        return True  # Return True р╣Ар╕Юр╕╖р╣Ир╕нр╣Др╕бр╣Ир╣Гр╕лр╣Йр╕гр╕░р╕Ър╕Ър╕лр╕вр╕╕р╕Ф

def send_line_notify_fallback(message: str) -> bool:
    """
    р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Ьр╣Ир╕▓р╕Щ Line Notify (Fallback method)
    
    Args:
        message (str): р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕кр╣Ир╕З
        
    Returns:
        bool: True р╕Цр╣Йр╕▓р╕кр╣Ир╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И, False р╕Цр╣Йр╕▓р╕кр╣Ир╕Зр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И
    """
    try:
        url = 'https://notify-api.line.me/api/notify'
        token = os.getenv('LINE_NOTIFY_TOKEN')  # р╣Гр╕Кр╣Й token р╣Бр╕вр╕Бр╕кр╕│р╕лр╕гр╕▒р╕Ъ Line Notify
        
        if not token:
            logging.warning("LINE_NOTIFY_TOKEN not found")
            return False
        
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        data = {'message': message}
        
        response = requests.post(url, headers=headers, data=data, timeout=15)
        
        if response.status_code == 200:
            logging.info("Line Notify sent successfully")
            return True
        elif response.status_code == 410:
            logging.error("Line Notify API has been discontinued")
            return False
        else:
            logging.error(f"Line Notify failed: {response.status_code}")
            return False
            
    except Exception as e:
        logging.error(f"Line Notify error: {e}")
        return False

def send_line_message_with_retry(message: str, max_retries: int = 3) -> bool:
    """
    р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Ьр╣Ир╕▓р╕Щ Line Bot API р╕Юр╕гр╣Йр╕нр╕б retry mechanism
    
    Args:
        message (str): р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕кр╣Ир╕З
        max_retries (int): р╕Ир╕│р╕Щр╕зр╕Щр╕Др╕гр╕▒р╣Йр╕Зр╕Чр╕╡р╣Ир╕Ир╕░ retry
        
    Returns:
        bool: True р╕Цр╣Йр╕▓р╕кр╣Ир╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И
    """
    for attempt in range(max_retries):
        try:
            if send_line_message(message):
                return True
            
            # р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И р╕ер╕нр╕З Line Notify
            if attempt == max_retries - 1:  # Last attempt
                logging.info("Trying Line Notify as fallback...")
                return send_line_notify_fallback(message)
                
        except Exception as e:
            logging.error(f"Attempt {attempt + 1} failed: {e}")
            
    return False

def send_console_message(message: str) -> bool:
    """
    р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Др╕Ыр╕вр╕▒р╕З console (Fallback method)
    
    Args:
        message (str): р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕кр╣Ир╕З
        
    Returns:
        bool: Always True
    """
    print(f"\n{'='*60}")
    print(f"ЁЯУ▒ NOTIFICATION:")
    print(f"{message}")
    print(f"{'='*60}\n")
    return True

def format_purchase_message(purchase_data: dict) -> str:
    """
    р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Бр╕▓р╕гр╕Лр╕╖р╣Йр╕н BTC
    
    Args:
        purchase_data (dict): р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Лр╕╖р╣Йр╕н
        
    Returns:
        str: р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╣Бр╕ер╣Йр╕з
    """
    try:
        message = f"""тЬЕ DCA BTC Success!

ЁЯУЕ Time: {purchase_data.get('timestamp', 'N/A')}
ЁЯТ░ Purchased: {purchase_data.get('usdt_amount', 0):.2f} USDT
тВ┐ BTC Amount: {purchase_data.get('btc_quantity', 0):.8f} BTC
ЁЯУИ Price: р╕┐{purchase_data.get('btc_price', 0):,.2f}
ЁЯФв Order ID: {purchase_data.get('order_id', 'N/A')}
ЁЯУЛ Schedule ID: {purchase_data.get('schedule_id', 'N/A')}

ЁЯОп DCA Strategy Working!"""
        
        return message
        
    except Exception as e:
        logging.error(f"Error formatting purchase message: {e}")
        return f"тЬЕ DCA BTC Purchase completed (formatting error: {e})"

def format_error_message(error_data: dict) -> str:
    """
    р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б error
    
    Args:
        error_data (dict): р╕Вр╣Йр╕нр╕бр╕╣р╕е error
        
    Returns:
        str: р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б error р╕Чр╕╡р╣Ир╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╣Бр╕ер╣Йр╕з
    """
    try:
        message = f"""тЭМ DCA BTC Error!

ЁЯУЕ Time: {error_data.get('timestamp', 'N/A')}
ЁЯЪи Error: {error_data.get('error_message', 'Unknown error')}
ЁЯУЛ Schedule ID: {error_data.get('schedule_id', 'N/A')}
ЁЯТ░ Attempted Amount: {error_data.get('usdt_amount', 0):.2f} USDT

тЪая╕П Please check the system!"""
        
        return message
        
    except Exception as e:
        logging.error(f"Error formatting error message: {e}")
        return f"тЭМ DCA BTC Error occurred (formatting error: {e})"

def send_purchase_notification(purchase_data: dict) -> bool:
    """
    р╕кр╣Ир╕Зр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╕Лр╕╖р╣Йр╕н BTC
    
    Args:
        purchase_data (dict): р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Лр╕╖р╣Йр╕н
        
    Returns:
        bool: True р╕Цр╣Йр╕▓р╕кр╣Ир╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И
    """
    message = format_purchase_message(purchase_data)
    return send_line_message_with_retry(message)

def send_error_notification(error_data: dict) -> bool:
    """
    р╕кр╣Ир╕Зр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ error
    
    Args:
        error_data (dict): р╕Вр╣Йр╕нр╕бр╕╣р╕е error
        
    Returns:
        bool: True р╕Цр╣Йр╕▓р╕кр╣Ир╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И
    """
    message = format_error_message(error_data)
    return send_line_message_with_retry(message)

def send_system_notification(message_type: str, details: str) -> bool:
    """
    р╕кр╣Ир╕Зр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕гр╕░р╕Ър╕Ъ
    
    Args:
        message_type (str): р╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б (start, stop, error, warning)
        details (str): р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф
        
    Returns:
        bool: True р╕Цр╣Йр╕▓р╕кр╣Ир╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И
    """
    icons = {
        'start': 'ЁЯЪА',
        'stop': 'ЁЯЫС',
        'error': 'тЭМ',
        'warning': 'тЪая╕П',
        'info': 'тД╣я╕П'
    }
    
    icon = icons.get(message_type, 'тД╣я╕П')
    message = f"{icon} BTC DCA System\n\n{details}"
    
    return send_line_message_with_retry(message)

def notify_exchange_changed(exchange: str, flags: dict | None = None) -> bool:
    """
    р╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╣Ар╕бр╕╖р╣Ир╕нр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щ Exchange р╕кр╕│р╕лр╕гр╕▒р╕Ъ DCA (global)
    flags: { 'testnet': bool, 'dry_run': bool }
    """
    suffix = []
    try:
        if flags:
            if flags.get('testnet'):
                suffix.append('TESTNET')
            if flags.get('dry_run'):
                suffix.append('DRY_RUN')
    except Exception:
        pass
    suffix_text = f" ({'/'.join(suffix)})" if suffix else ''
    ex = (exchange or '').upper()
    msg = f"ЁЯФД р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щ Exchange р╕кр╕│р╕лр╕гр╕▒р╕Ъ DCA р╣Ар╕Ыр╣Зр╕Щ: {ex}{suffix_text}"
    return send_line_message_with_retry(msg)

def send_scheduler_status(status: str, details: str = "") -> bool:
    """
    р╕кр╣Ир╕Зр╕кр╕Цр╕▓р╕Щр╕░р╕Вр╕нр╕З scheduler
    
    Args:
        status (str): р╕кр╕Цр╕▓р╕Щр╕░ (started, stopped, error)
        details (str): р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б
        
    Returns:
        bool: True р╕Цр╣Йр╕▓р╕кр╣Ир╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И
    """
    from datetime import datetime
    
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    if status == 'started':
        message = f"ЁЯЪА BTC DCA Scheduler Started\nЁЯУЕ {timestamp}\n{details}"
    elif status == 'stopped':
        message = f"ЁЯЫС BTC DCA Scheduler Stopped\nЁЯУЕ {timestamp}\n{details}"
    elif status == 'error':
        message = f"тЭМ BTC DCA Scheduler Error\nЁЯУЕ {timestamp}\nЁЯЪи {details}"
    else:
        message = f"тД╣я╕П BTC DCA Scheduler Update\nЁЯУЕ {timestamp}\n{details}"
    
    return send_line_message_with_retry(message)

def test_line_bot_api() -> bool:
    """
    р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕кр╣Ир╕З Line Bot API
    """
    from datetime import datetime
    
    test_message = f"""ЁЯзк Line Bot API Test

ЁЯУЕ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
тЬЕ BTC DCA System Test Message
ЁЯдЦ Line Bot API is working!

This is a test notification from your BTC DCA system."""
    
    print("Testing Line Bot API...")
    result = send_line_message(test_message)
    
    if result:
        print("тЬЕ Line Bot API test successful!")
    else:
        print("тЪая╕П Line Bot API test failed, but system continues")
        
    return result

def get_line_bot_setup_instructions() -> str:
    """
    р╣Бр╕кр╕Фр╕Зр╕зр╕┤р╕Шр╕╡р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ Line Bot API
    """
    instructions = """
ЁЯФз р╕зр╕┤р╕Шр╕╡р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ Line Bot API:

1. р╕кр╕гр╣Йр╕▓р╕З Line Developer Account:
   - р╣Др╕Ыр╕Чр╕╡р╣И https://developers.line.biz/
   - Login р╕Фр╣Йр╕зр╕в Line account

2. р╕кр╕гр╣Йр╕▓р╕З Provider:
   - р╕Др╕ер╕┤р╕Б "Create Provider"
   - р╣Гр╕кр╣Ир╕Кр╕╖р╣Ир╕н Provider

3. р╕кр╕гр╣Йр╕▓р╕З Messaging API Channel:
   - р╣Ар╕ер╕╖р╕нр╕Б "Messaging API"
   - р╕Бр╕гр╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е Channel
   - р╣Ар╕Ыр╕┤р╕Фр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ Channel

4. р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ Channel:
   - р╣Др╕Ыр╕Чр╕╡р╣И "Basic settings" tab
   - Copy "Channel secret"
   - р╣Др╕Ыр╕Чр╕╡р╣И "Messaging API" tab
   - Copy "Channel access token"

5. р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Ыр╣Зр╕Щр╣Ар╕Юр╕╖р╣Ир╕нр╕Щ:
   - Scan QR Code р╕лр╕гр╕╖р╕н add Line ID
   - р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Гр╕Фр╣Ж р╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕гр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓

6. р╕лр╕▓ User ID:
   - р╣Гр╕Кр╣Й webhook р╕лр╕гр╕╖р╕н Line Bot SDK
   - р╕лр╕гр╕╖р╕нр╣Гр╕Кр╣Й Line Official Account Manager

7. р╣Гр╕кр╣Ир╣Гр╕Щ .env file:
   LINE_CHANNEL_ACCESS_TOKEN=your_channel_access_token
   LINE_USER_ID=your_user_id

ЁЯУЭ Note: Line Bot API р╣Гр╕Кр╣Йр╣Бр╕Чр╕Щ Line Notify р╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕вр╕Бр╣Ар╕ер╕┤р╕Б
"""
    
    print(instructions)
    return instructions

# Alternative notification methods
def send_webhook_notification(message: str, webhook_url: str = None) -> bool:
    """
    р╕кр╣Ир╕З notification р╕Ьр╣Ир╕▓р╕Щ webhook (Discord, Slack, etc.)
    """
    if not webhook_url:
        webhook_url = os.getenv('WEBHOOK_URL')
    
    if not webhook_url:
        return False
    
    try:
        payload = {"content": message}  # Discord format
        response = requests.post(webhook_url, json=payload, timeout=10)
        return response.status_code == 200
    except Exception as e:
        logging.error(f"Webhook notification error: {e}")
        return False

def send_email_notification(message: str, email: str = None) -> bool:
    """
    р╕кр╣Ир╕Зр╕нр╕╡р╣Ар╕бр╕е notification (р╕кр╕│р╕лр╕гр╕▒р╕Ър╕нр╕Щр╕▓р╕Др╕Х)
    """
    # TODO: Implement email notification using SMTP
    print(f"ЁЯУз Email notification: {message}")
    return True

# ====== Strategy notifications (stubs ready to use) ======
def notify_cdc_transition(prev_status: str, curr_status: str) -> bool:
    icon = 'ЁЯЯв' if (curr_status or '').lower() == 'up' else 'ЁЯФ╗'
    msg = f"{icon} CDC Action Zone Transition (1D)\n{prev_status or 'unknown'} тЖТ {curr_status}"
    return send_line_message_with_retry(msg)

def notify_half_sell_executed(data: dict) -> bool:
    pct = data.get('pct')
    header = f"тЬЕ Sell {pct}% Executed" if pct is not None else "тЬЕ Half-Sell Executed"
    exchange = format_exchange_label(data.get('exchange'))
    msg = (
        f"{header}\n"
        f"Exchange: {exchange}\n"
        f"Qty: {data.get('btc_qty', 0):.8f} BTC\n"
        f"Price: р╕┐{data.get('price', 0):,.2f}\n"
        f"Proceeds: {data.get('usdt', 0):,.2f} USDT\n"
        f"Order ID: {data.get('order_id', 'N/A')}"
    )
    return send_line_message_with_retry(msg)

def notify_half_sell_skipped(data: dict) -> bool:
    pct = data.get('pct')
    header = f"тЪая╕П Sell {pct}% Skipped" if pct is not None else "тЪая╕П Half-Sell Skipped (Too Small)"
    msg = (
        f"{header}\n"
        f"Reason: {data.get('reason', 'notional below minimum')}\n"
        f"BTC Free: {data.get('btc_free', 0):.8f} | stepSize: {data.get('step', 0)}\n"
        f"MinNotional: {data.get('min_notional', 0)}"
    )
    exch = data.get('exchange')
    if exch:
        msg += f"\nExchange: {format_exchange_label(exch)}"
    return send_line_message_with_retry(msg)

def notify_weekly_dca_buy(data: dict) -> bool:
    exchange = format_exchange_label(data.get('exchange'))
    schedule = data.get('schedule_id')
    schedule_label = schedule if schedule not in (None, '') else '-'
    msg = (
        f"тЬЕ Weekly DCA Buy (CDC: GREEN)\n"
        f"Exchange: {exchange}\n"
        f"Buy: {data.get('usdt', 0):.2f} USDT\n"
        f"Got: {data.get('btc_qty', 0):.8f} BTC\n"
        f"Price: р╕┐{data.get('price', 0):,.2f}\n"
        f"Schedule: #{schedule_label}\n"
        f"Order ID: {data.get('order_id', 'N/A')}"
    )
    return send_line_message_with_retry(msg)

def notify_weekly_dca_skipped(amount: float, reserve: float) -> bool:
    amt = float(amount or 0.0)
    res_val = float(reserve or 0.0)
    msg = (
        f"тП╕ Weekly DCA Skipped (CDC: RED)\n"
        f"+{amt:,.2f} USDT to reserve\n"
        f"Reserve: {res_val:,.2f} USDT"
    )
    return send_line_message_with_retry(msg)


def notify_weekly_dca_skipped_exchange(exchange: str, amount: float, reserve: float) -> bool:
    exchange_label = format_exchange_label(exchange)
    amt = float(amount or 0.0)
    res_val = float(reserve or 0.0)
    msg = (
        f"тП╕ Weekly DCA Skipped (CDC: RED)\n"
        f"Exchange: {exchange_label}\n"
        f"+{amt:,.2f} USDT to reserve\n"
        f"Reserve: {res_val:,.2f} USDT"
    )
    return send_line_message_with_retry(msg)

def notify_reserve_buy_executed(data: dict) -> bool:
    exchange = format_exchange_label(data.get('exchange'))
    msg = (
        f"тЬЕ Reserve Buy Executed\n"
        f"Exchange: {exchange}\n"
        f"Spend: {data.get('spend', 0):.2f} USDT\n"
        f"Got: {data.get('btc_qty', 0):.8f} BTC\n"
        f"Price: р╕┐{data.get('price', 0):,.2f}\n"
        f"Reserve Left: {data.get('reserve_left', 0):,.2f} USDT\n"
        f"Order ID: {data.get('order_id', 'N/A')}"
    )
    return send_line_message_with_retry(msg)

def notify_reserve_buy_skipped_min_notional(data: dict) -> bool:
    msg = (
        f"тЪая╕П Reserve Buy Skipped (Below minNotional)\n"
        f"Spend: {data.get('spend', 0):.2f} < {data.get('min_notional', 0):,.2f}\n"
        f"Reserve: {data.get('reserve', 0):,.2f} USDT"
    )
    return send_line_message_with_retry(msg)

def notify_strategy_error(context: str, error: str) -> bool:
    msg = f"тЭМ Strategy Error\n{context}\nЁЯЪи {error}"
    return send_line_message_with_retry(msg)

def notify_cdc_toggle(enabled: bool, flags: dict | None = None) -> bool:
    """р╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╣Ар╕бр╕╖р╣Ир╕нр╕кр╕ер╕▒р╕Ър╕кр╕Цр╕▓р╕Щр╕░ CDC Trading р╣Бр╕Ър╕Ъ Global
    flags: { 'testnet': bool, 'dry_run': bool }
    """
    suffix = []
    try:
        if flags:
            if flags.get('testnet'):
                suffix.append('TESTNET')
            if flags.get('dry_run'):
                suffix.append('DRY_RUN')
    except Exception:
        pass
    suffix_text = f" ({'/'.join(suffix)})" if suffix else ''

    if enabled:
        msg = f"ЁЯЯв CDC Trading Enabled (1D){suffix_text}\nр╕гр╕░р╕Ър╕Ър╕Ир╕░р╕Чр╕│ DCA р╕Хр╕▓р╕б CDC Action Zone"
    else:
        msg = f"тП╕ CDC Trading Disabled{suffix_text}\nр╕гр╕░р╕Ър╕Ър╕Ир╕░р╕Чр╕│ DCA р╕Хр╕▓р╕бр╕Хр╕▓р╕гр╕▓р╕Зр╕Ыр╕Бр╕Хр╕┤ р╣Др╕бр╣Ир╕Юр╕┤р╕Ир╕▓р╕гр╕Ур╕▓ CDC"
    return send_line_message_with_retry(msg)

if __name__ == "__main__":
    # р╕гр╕▒р╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ
    print("ЁЯзк Testing Line Bot API notification system...")
    
    # р╕Чр╕Фр╕кр╕нр╕Ъ Line Bot API
    test_result = test_line_bot_api()
    
    # р╣Бр╕кр╕Фр╕Зр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡ token
    if not os.getenv('LINE_CHANNEL_ACCESS_TOKEN'):
        print("\nтЪая╕П LINE_CHANNEL_ACCESS_TOKEN not found!")
        get_line_bot_setup_instructions()
    
    if not os.getenv('LINE_USER_ID'):
        print("\nтЪая╕П LINE_USER_ID not found!")
        print("Please add your Line User ID to .env file")
    
    # р╕Чр╕Фр╕кр╕нр╕Ъ format functions
    print("\nЁЯзк Testing message formatting...")
    
    # Test purchase message
    purchase_test = {
        'timestamp': '2025-06-02 11:00:00',
        'usdt_amount': 100.0,
        'btc_quantity': 0.00094123,
        'btc_price': 106234.56,
        'order_id': 12345678,
        'schedule_id': 3
    }
    
    purchase_msg = format_purchase_message(purchase_test)
    print("Purchase message format:")
    print(purchase_msg)
    
    # Test error message
    error_test = {
        'timestamp': '2025-06-02 11:01:00',
        'error_message': 'Insufficient balance',
        'schedule_id': 3,
        'usdt_amount': 100.0
    }
    
    error_msg = format_error_message(error_test)
    print("\nError message format:")
    print(error_msg)
    
    print("\nтЬЕ Testing completed!")
